/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AIRPORT_H_RPCGEN
#define _AIRPORT_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAXLEN 255

typedef char *nametype_air;

struct AirportNode {
	nametype_air AirportName;
	nametype_air AirportCode;
	double latitude;
	double longitude;
	double distance;
	struct AirportNode *next;
};
typedef struct AirportNode AirportNode;

struct geoCord {
	double latitude;
	double longitude;
};
typedef struct geoCord geoCord;

struct findAirport_ret {
	int err;
	union {
		AirportNode *list;
	} findAirport_ret_u;
};
typedef struct findAirport_ret findAirport_ret;

#define AIRPROG 0x34567881
#define AIR_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define FINDAIR 1
extern  findAirport_ret * findair_1(geoCord *, CLIENT *);
extern  findAirport_ret * findair_1_svc(geoCord *, struct svc_req *);
extern int airprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define FINDAIR 1
extern  findAirport_ret * findair_1();
extern  findAirport_ret * findair_1_svc();
extern int airprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_nametype_air (XDR *, nametype_air*);
extern  bool_t xdr_AirportNode (XDR *, AirportNode*);
extern  bool_t xdr_geoCord (XDR *, geoCord*);
extern  bool_t xdr_findAirport_ret (XDR *, findAirport_ret*);

#else /* K&R C */
extern bool_t xdr_nametype_air ();
extern bool_t xdr_AirportNode ();
extern bool_t xdr_geoCord ();
extern bool_t xdr_findAirport_ret ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_AIRPORT_H_RPCGEN */
