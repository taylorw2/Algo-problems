/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _PLACES_H_RPCGEN
#define _PLACES_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAXLEN 255

typedef char *nametype;

struct AirportNode_places {
	nametype AirportName;
	nametype AirportCode;
	double latitude;
	double longitude;
	double distance;
	struct AirportNode_places *next;
};
typedef struct AirportNode_places AirportNode_places;

struct cityNode {
	nametype state;
	nametype city;
};
typedef struct cityNode cityNode;

struct findPlace_ret {
	int err;
	union {
		AirportNode_places *list;
	} findPlace_ret_u;
};
typedef struct findPlace_ret findPlace_ret;

#define PLACEPROG 0x34567880
#define PLACE_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define FINDPLACE 1
extern  findPlace_ret * findplace_1(cityNode *, CLIENT *);
extern  findPlace_ret * findplace_1_svc(cityNode *, struct svc_req *);
extern int placeprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define FINDPLACE 1
extern  findPlace_ret * findplace_1();
extern  findPlace_ret * findplace_1_svc();
extern int placeprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_nametype (XDR *, nametype*);
extern  bool_t xdr_AirportNode_places (XDR *, AirportNode_places*);
extern  bool_t xdr_cityNode (XDR *, cityNode*);
extern  bool_t xdr_findPlace_ret (XDR *, findPlace_ret*);

#else /* K&R C */
extern bool_t xdr_nametype ();
extern bool_t xdr_AirportNode_places ();
extern bool_t xdr_cityNode ();
extern bool_t xdr_findPlace_ret ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_PLACES_H_RPCGEN */
