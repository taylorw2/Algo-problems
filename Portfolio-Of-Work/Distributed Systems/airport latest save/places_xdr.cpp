/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "places.h"

bool_t
xdr_nametype (XDR *xdrs, nametype *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, objp, MAXLEN))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_AirportNode_places (XDR *xdrs, AirportNode_places *objp)
{
	register int32_t *buf;

	 if (!xdr_nametype (xdrs, &objp->AirportName))
		 return FALSE;
	 if (!xdr_nametype (xdrs, &objp->AirportCode))
		 return FALSE;
	 if (!xdr_double (xdrs, &objp->latitude))
		 return FALSE;
	 if (!xdr_double (xdrs, &objp->longitude))
		 return FALSE;
	 if (!xdr_double (xdrs, &objp->distance))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (AirportNode_places), (xdrproc_t) xdr_AirportNode_places))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_cityNode (XDR *xdrs, cityNode *objp)
{
	register int32_t *buf;

	 if (!xdr_nametype (xdrs, &objp->state))
		 return FALSE;
	 if (!xdr_nametype (xdrs, &objp->city))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_findPlace_ret (XDR *xdrs, findPlace_ret *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->err))
		 return FALSE;
	switch (objp->err) {
	case 0:
		 if (!xdr_pointer (xdrs, (char **)&objp->findPlace_ret_u.list, sizeof (AirportNode_places), (xdrproc_t) xdr_AirportNode_places))
			 return FALSE;
		break;
	default:
		break;
	}
	return TRUE;
}
